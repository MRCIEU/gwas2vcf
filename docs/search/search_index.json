{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"gwas2vcf: convert GWAS summary statistics to VCF Tool to map GWAS summary statistics to VCF/BCF with on-the-fly harmonisation to a supplied reference FASTA Produces GWAS-VCF with version 1.0 of the specification Data Full GWAS summary statistics harmonised to GWAS-VCF are available on >14,000 datasets available from https://gwas.mrcieu.ac.uk/ Citation Lyon M, Andrews S, Elsworth B, Gaunt T, Hemani G, Marcora E. The variant call format provides efficient and robust storage of GWAS summary statistics. Genome Biol 22, 32 (2021). https://doi.org/10.1186/s13059-020-02248-0","title":"Home"},{"location":"#gwas2vcf-convert-gwas-summary-statistics-to-vcf","text":"Tool to map GWAS summary statistics to VCF/BCF with on-the-fly harmonisation to a supplied reference FASTA Produces GWAS-VCF with version 1.0 of the specification","title":"gwas2vcf: convert GWAS summary statistics to VCF"},{"location":"#data","text":"Full GWAS summary statistics harmonised to GWAS-VCF are available on >14,000 datasets available from https://gwas.mrcieu.ac.uk/","title":"Data"},{"location":"#citation","text":"Lyon M, Andrews S, Elsworth B, Gaunt T, Hemani G, Marcora E. The variant call format provides efficient and robust storage of GWAS summary statistics. Genome Biol 22, 32 (2021). https://doi.org/10.1186/s13059-020-02248-0","title":"Citation"},{"location":"downstream/","text":"Working with GWAS-VCF See below examples of working with GWAS-VCF. Let us know if you have other use cases through the issues page! Data Full GWAS summary statistics harmonised to GWAS-VCF are available on >14,000 datasets available from https://gwas.mrcieu.ac.uk/ Parsing libraries See R and Python3 libraries for reading GWAS summary statistics in GWAS-VCF Command-line manipulation The following examples require: bcftools gatk htslib Please cite the relevant tool(s) if you use these examples. Filter Extract genome-wide significant variants The LP field is -log10(P), 7.3 is approx 5e-8 bcftools filter \\ -i 'FORMAT/LP > 7.3' \\ -o output.vcf \\ file.vcf.gz Extract variants by gene Requires annotation by Ensembl (see below) bcftools filter \\ -i 'INFO/ENSG_ID == \"ENSG00000198670\"' \\ file.vcf.gz Extract variants by pathway Requires annotation by Reactome (see below) bcftools filter \\ -i 'INFO/Reactome_ID == \"R-HSA-3000171\"' \\ file.vcf.gz Select genome region for further analysis bcftools filter \\ -r 1:1000000-2000000 \\ -o output.vcf.gz \\ input.vcf.gz Annotate Add variant frequency # download 1000 genomes phase 3 (hg19/GRCh37) allele frequencies and index wget http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz wget http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz.tbi # annotate GWAS-VCF with 1kg allele frequencies bcftools annotate \\ -a ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz \\ -c AF \\ -O z \\ -o output.vcf.gz \\ input.vcf.gz Add gene/pathway annotations Download and merge input files # download ensembl-to-position mapping and sort by ensgId curl ftp://ftp.ensembl.org/pub/grch37/release-87/gff3/homo_sapiens/Homo_sapiens.GRCh37.87.gff3.gz | \\ gzip -dc | \\ awk -F\"\\t|:|;|=\" '$3==\"gene\" && $1 >= 1 && $1 <= 22 {print $11\"\\t\"$1\"\\t\"$4\"\\t\"$5}' | \\ sort -k1,1 > Ensembl2Position.sorted.txt # download ensembl-to-pathway mapping and sort by ensgId curl https://reactome.org/download/current/Ensembl2Reactome.txt | \\ grep \"Homo sapiens\" | \\ cut -s -f1,2 | \\ sort -k1,1 > Ensembl2Reactome.sorted.txt # merge tables by ensgId, sort, compress and index join \\ -t $'\\t' \\ --check-order \\ Ensembl2Position.sorted.txt \\ Ensembl2Reactome.sorted.txt | \\ awk -F\"\\t\" '{print $2\"\\t\"$3-1\"\\t\"$4\"\\t\"$5}' | \\ sort -k1,1V -k2,2n -k3,3n | \\ bgzip -c > reactome.bed.gz tabix -p bed reactome.bed.gz # sort, compress and index ensembl-to-position mapping awk -F\"\\t\" '{print $2\"\\t\"$3-1\"\\t\"$4\"\\t\"$1}' Ensembl2Position.sorted.txt | \\ sort -k1,1V -k2,2n -k3,3n | \\ bgzip -c > ensembl.bed.gz tabix -p bed ensembl.bed.gz Annotate GWAS-VCF with gene ID # annotate GWAS-VCF bcftools annotate \\ -a ensembl.bed.gz \\ -c CHROM,FROM,TO,ENSG_ID \\ -h <(echo '##INFO=<ID=ENSG_ID,Number=.,Type=String,Description=\"Ensembl gene ID\">') \\ -o output.vcf.gz \\ -O z \\ -l ENSG_ID:unique \\ input.vcf.gz Annotate GWAS-VCF with Reactome ID # annotate GWAS-VCF bcftools annotate \\ -a reactome.bed.gz \\ -c CHROM,FROM,TO,Reactome_ID \\ -h <(echo '##INFO=<ID=Reactome_ID,Number=.,Type=String,Description=\"Reactome ID\">') \\ -o output.vcf.gz \\ -O z \\ -l Reactome_ID:unique \\ input.vcf.gz Convert Export to NHGRI-EBI GWAS catalog format # map to GWAS catalog format bcftools query \\ -e 'ID == \".\"' \\ -f '%ID\\t[%LP]\\t%CHROM\\t%POS\\t%ALT\\t%REF\\t%AF\\t[%ES\\t%SE]\\n' \\ gwas.vcf.gz | \\ awk 'BEGIN {print \"variant_id\\tp_value\\tchromosome\\tbase_pair_location\\teffect_allele\\tother_allele\\teffect_allele_frequency\\tbeta\\tstandard_error\"}; {OFS=\"\\t\"; if ($2==0) $2=1; else if ($2==999) $2=0; else $2=10^-$2; print}' > gwas.tsv # validate file using [ss-validate](https://pypi.org/project/ss-validate) ss-validate -f gwas.tsv Liftover Map genomic coordinates to another genome build (liftover) This procedure requires a chain file which contains the chromosome base-position mapping between two genome builds # download chain file wget http://fileserve.mrcieu.ac.uk/ref/chains/b36tob37.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/b37tob36.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/b37tohg18.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/b37tohg19.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/hg18tob37.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/hg19toHg18.chain curl https://hgdownload.soe.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz | zcat | sed 's/chr//' > b37ToHg38.chain # perform liftover gatk LiftoverVcf \\ --INPUT input.vcf.gz \\ --OUTPUT output.vcf.gz \\ --REJECT rejected.vcf.gz \\ --CHAIN file.chain \\ --REFERENCE_SEQUENCE target.fasta \\ --RECOVER_SWAPPED_REF_ALT false Merge Combine multiple GWAS summary stats into a single file This is useful for distributing QTL/molecular phenotype GWAS bcftools merge \\ -O z \\ -o merged.vcf.gz \\ *.vcf.gz Validate Check the file format is valid gatk ValidateVariants \\ -V input.vcf.gz \\ -R ref.fasta \\ --validation-type-to-exclude ALLELES","title":"Downstream analyses"},{"location":"downstream/#working-with-gwas-vcf","text":"See below examples of working with GWAS-VCF. Let us know if you have other use cases through the issues page!","title":"Working with GWAS-VCF"},{"location":"downstream/#data","text":"Full GWAS summary statistics harmonised to GWAS-VCF are available on >14,000 datasets available from https://gwas.mrcieu.ac.uk/","title":"Data"},{"location":"downstream/#parsing-libraries","text":"See R and Python3 libraries for reading GWAS summary statistics in GWAS-VCF","title":"Parsing libraries"},{"location":"downstream/#command-line-manipulation","text":"The following examples require: bcftools gatk htslib Please cite the relevant tool(s) if you use these examples.","title":"Command-line manipulation"},{"location":"downstream/#filter","text":"","title":"Filter"},{"location":"downstream/#extract-genome-wide-significant-variants","text":"The LP field is -log10(P), 7.3 is approx 5e-8 bcftools filter \\ -i 'FORMAT/LP > 7.3' \\ -o output.vcf \\ file.vcf.gz","title":"Extract genome-wide significant variants"},{"location":"downstream/#extract-variants-by-gene","text":"Requires annotation by Ensembl (see below) bcftools filter \\ -i 'INFO/ENSG_ID == \"ENSG00000198670\"' \\ file.vcf.gz","title":"Extract variants by gene"},{"location":"downstream/#extract-variants-by-pathway","text":"Requires annotation by Reactome (see below) bcftools filter \\ -i 'INFO/Reactome_ID == \"R-HSA-3000171\"' \\ file.vcf.gz","title":"Extract variants by pathway"},{"location":"downstream/#select-genome-region-for-further-analysis","text":"bcftools filter \\ -r 1:1000000-2000000 \\ -o output.vcf.gz \\ input.vcf.gz","title":"Select genome region for further analysis"},{"location":"downstream/#annotate","text":"","title":"Annotate"},{"location":"downstream/#add-variant-frequency","text":"# download 1000 genomes phase 3 (hg19/GRCh37) allele frequencies and index wget http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz wget http://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz.tbi # annotate GWAS-VCF with 1kg allele frequencies bcftools annotate \\ -a ALL.wgs.phase3_shapeit2_mvncall_integrated_v5b.20130502.sites.vcf.gz \\ -c AF \\ -O z \\ -o output.vcf.gz \\ input.vcf.gz","title":"Add variant frequency"},{"location":"downstream/#add-genepathway-annotations","text":"Download and merge input files # download ensembl-to-position mapping and sort by ensgId curl ftp://ftp.ensembl.org/pub/grch37/release-87/gff3/homo_sapiens/Homo_sapiens.GRCh37.87.gff3.gz | \\ gzip -dc | \\ awk -F\"\\t|:|;|=\" '$3==\"gene\" && $1 >= 1 && $1 <= 22 {print $11\"\\t\"$1\"\\t\"$4\"\\t\"$5}' | \\ sort -k1,1 > Ensembl2Position.sorted.txt # download ensembl-to-pathway mapping and sort by ensgId curl https://reactome.org/download/current/Ensembl2Reactome.txt | \\ grep \"Homo sapiens\" | \\ cut -s -f1,2 | \\ sort -k1,1 > Ensembl2Reactome.sorted.txt # merge tables by ensgId, sort, compress and index join \\ -t $'\\t' \\ --check-order \\ Ensembl2Position.sorted.txt \\ Ensembl2Reactome.sorted.txt | \\ awk -F\"\\t\" '{print $2\"\\t\"$3-1\"\\t\"$4\"\\t\"$5}' | \\ sort -k1,1V -k2,2n -k3,3n | \\ bgzip -c > reactome.bed.gz tabix -p bed reactome.bed.gz # sort, compress and index ensembl-to-position mapping awk -F\"\\t\" '{print $2\"\\t\"$3-1\"\\t\"$4\"\\t\"$1}' Ensembl2Position.sorted.txt | \\ sort -k1,1V -k2,2n -k3,3n | \\ bgzip -c > ensembl.bed.gz tabix -p bed ensembl.bed.gz Annotate GWAS-VCF with gene ID # annotate GWAS-VCF bcftools annotate \\ -a ensembl.bed.gz \\ -c CHROM,FROM,TO,ENSG_ID \\ -h <(echo '##INFO=<ID=ENSG_ID,Number=.,Type=String,Description=\"Ensembl gene ID\">') \\ -o output.vcf.gz \\ -O z \\ -l ENSG_ID:unique \\ input.vcf.gz Annotate GWAS-VCF with Reactome ID # annotate GWAS-VCF bcftools annotate \\ -a reactome.bed.gz \\ -c CHROM,FROM,TO,Reactome_ID \\ -h <(echo '##INFO=<ID=Reactome_ID,Number=.,Type=String,Description=\"Reactome ID\">') \\ -o output.vcf.gz \\ -O z \\ -l Reactome_ID:unique \\ input.vcf.gz","title":"Add gene/pathway annotations"},{"location":"downstream/#convert","text":"","title":"Convert"},{"location":"downstream/#export-to-nhgri-ebi-gwas-catalog-format","text":"# map to GWAS catalog format bcftools query \\ -e 'ID == \".\"' \\ -f '%ID\\t[%LP]\\t%CHROM\\t%POS\\t%ALT\\t%REF\\t%AF\\t[%ES\\t%SE]\\n' \\ gwas.vcf.gz | \\ awk 'BEGIN {print \"variant_id\\tp_value\\tchromosome\\tbase_pair_location\\teffect_allele\\tother_allele\\teffect_allele_frequency\\tbeta\\tstandard_error\"}; {OFS=\"\\t\"; if ($2==0) $2=1; else if ($2==999) $2=0; else $2=10^-$2; print}' > gwas.tsv # validate file using [ss-validate](https://pypi.org/project/ss-validate) ss-validate -f gwas.tsv","title":"Export to NHGRI-EBI GWAS catalog format"},{"location":"downstream/#liftover","text":"","title":"Liftover"},{"location":"downstream/#map-genomic-coordinates-to-another-genome-build-liftover","text":"This procedure requires a chain file which contains the chromosome base-position mapping between two genome builds # download chain file wget http://fileserve.mrcieu.ac.uk/ref/chains/b36tob37.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/b37tob36.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/b37tohg18.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/b37tohg19.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/hg18tob37.chain wget http://fileserve.mrcieu.ac.uk/ref/chains/hg19toHg18.chain curl https://hgdownload.soe.ucsc.edu/goldenPath/hg19/liftOver/hg19ToHg38.over.chain.gz | zcat | sed 's/chr//' > b37ToHg38.chain # perform liftover gatk LiftoverVcf \\ --INPUT input.vcf.gz \\ --OUTPUT output.vcf.gz \\ --REJECT rejected.vcf.gz \\ --CHAIN file.chain \\ --REFERENCE_SEQUENCE target.fasta \\ --RECOVER_SWAPPED_REF_ALT false","title":"Map genomic coordinates to another genome build (liftover)"},{"location":"downstream/#merge","text":"","title":"Merge"},{"location":"downstream/#combine-multiple-gwas-summary-stats-into-a-single-file","text":"This is useful for distributing QTL/molecular phenotype GWAS bcftools merge \\ -O z \\ -o merged.vcf.gz \\ *.vcf.gz","title":"Combine multiple GWAS summary stats into a single file"},{"location":"downstream/#validate","text":"","title":"Validate"},{"location":"downstream/#check-the-file-format-is-valid","text":"gatk ValidateVariants \\ -V input.vcf.gz \\ -R ref.fasta \\ --validation-type-to-exclude ALLELES","title":"Check the file format is valid"},{"location":"install/","text":"Install Quick start Use web interface http://vcf.mrcieu.ac.uk Run locally Either run directly on a UNIX host or using Docker containerisation (recommended) Download git clone git@github.com:MRCIEU/gwas2vcf.git cd gwas2vcf Native Requires Python v3.8 python3 -m venv env source env/bin/activate pip install -r requirements.txt pip install git+git://github.com/bioinformed/vgraph@v1.4.0#egg=vgraph python main.py -h Docker Pull image from DockerHub OR build image from source # pull image from DockerHub docker pull mrcieu/gwas2vcf ### OR ### # build docker image from source docker build -t gwas2vcf . Run docker run \\ -v /path/to/fasta:/path/to/fasta \\ --name gwas2vcf \\ -it gwas2vcf:latest \\ python main.py -h Usage usage: main.py [-h] [-v] [--out OUT] [--data DATA] --ref REF [--dbsnp DBSNP] --json JSON [--id ID] [--cohort_controls COHORT_CONTROLS] [--cohort_cases COHORT_CASES] [--csi] [--log {DEBUG,INFO,WARNING,ERROR,CRITICAL}] [--alias ALIAS] Map GWAS summary statistics to VCF/BCF optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit --out OUT Path to output VCF/BCF. If not present then must be specified as 'out' in json file --data DATA Path to GWAS summary stats. If not present then must be specified as 'data' in json file --ref REF Path to reference FASTA --dbsnp DBSNP Path to reference dbSNP VCF --json JSON Path to parameters JSON --id ID Study identifier. If not present then must be specified as 'id' in json file --cohort_controls COHORT_CONTROLS Total study number of controls (if case/control) or total sample size if continuous. Overwrites value if present in json file. --cohort_cases COHORT_CASES Total study number of cases. Overwrites value if present in json file. --csi Default is to index tbi but use this flag to index csi --log {DEBUG,INFO,WARNING,ERROR,CRITICAL} Set the logging level --alias ALIAS Optional chromosome alias file Additional parameters are passed through a JSON parameters file using --json <param.json> , see param.py for full details and below example. Note that field columns start at 0. Running the tests Unit tests: cd gwas2vcf python -m pytest -v test Reference files FASTA # GRCh36/hg18/b36 wget http://fileserve.mrcieu.ac.uk/ref/2.8/b36/human_b36_both.fasta.gz wget http://fileserve.mrcieu.ac.uk/ref/2.8/b36/human_b36_both.fasta.fai wget http://fileserve.mrcieu.ac.uk/ref/2.8/b36/human_b36_both.dict # GRCh37/hg19/b37 wget http://fileserve.mrcieu.ac.uk/ref/2.8/b37/human_g1k_v37.fasta.gz wget http://fileserve.mrcieu.ac.uk/ref/2.8/b37/human_g1k_v37.fasta.fai wget http://fileserve.mrcieu.ac.uk/ref/2.8/b37/human_g1k_v37.dict # GRCh38/hg38/b38 wget https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.fasta wget https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.fasta.fai wget https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.dict dbSNP # GRCh37/hg19/b37 wget http://fileserve.mrcieu.ac.uk/dbsnp/dbsnp.v153.b37.vcf.gz . wget http://fileserve.mrcieu.ac.uk/dbsnp/dbsnp.v153.b37.vcf.gz.tbi . # GRCh38/hg38/b38 wget http://fileserve.mrcieu.ac.uk/dbsnp/dbsnp.v153.hg38.vcf.gz . wget http://fileserve.mrcieu.ac.uk/dbsnp/dbsnp.v153.hg38.vcf.gz.tbi . Newer dbSNP builds can be obtained from the NCBI FTP but the VCF files have non-standard chromosome names which can be updated accordingly (thanks @darked89) # download latest dbSNP VCF wget https://ftp.ncbi.nih.gov/snp/latest_release/VCF/GCF_000001405.39.gz # define chromosome name mapping echo -n \"NC_000001.11 1 NC_000002.12 2 NC_000003.12 3 NC_000004.12 4 NC_000005.10 5 NC_000006.12 6 NC_000007.14 7 NC_000008.11 8 NC_000009.12 9 NC_000010.11 10 NC_000011.10 11 NC_000012.12 12 NC_000013.11 13 NC_000014.9 14 NC_000015.10 15 NC_000016.10 16 NC_000017.11 17 NC_000018.10 18 NC_000019.10 19 NC_000020.11 20 NC_000021.9 21 NC_000022.11 22 NC_000023.11 X NC_000024.10 Y NC_012920.1 MT \" > hg38_rename_chrom_names.tsv # update chromosome names bcftools annotate \\ --rename-chrs hg38_rename_chrom_names.tsv \\ --output-type z \\ --output dbSNP_clean.vcf.gz GCF_000001405.39.gz","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#quick-start","text":"Use web interface http://vcf.mrcieu.ac.uk","title":"Quick start"},{"location":"install/#run-locally","text":"Either run directly on a UNIX host or using Docker containerisation (recommended)","title":"Run locally"},{"location":"install/#download","text":"git clone git@github.com:MRCIEU/gwas2vcf.git cd gwas2vcf","title":"Download"},{"location":"install/#native","text":"Requires Python v3.8 python3 -m venv env source env/bin/activate pip install -r requirements.txt pip install git+git://github.com/bioinformed/vgraph@v1.4.0#egg=vgraph python main.py -h","title":"Native"},{"location":"install/#docker","text":"Pull image from DockerHub OR build image from source # pull image from DockerHub docker pull mrcieu/gwas2vcf ### OR ### # build docker image from source docker build -t gwas2vcf . Run docker run \\ -v /path/to/fasta:/path/to/fasta \\ --name gwas2vcf \\ -it gwas2vcf:latest \\ python main.py -h","title":"Docker"},{"location":"install/#usage","text":"usage: main.py [-h] [-v] [--out OUT] [--data DATA] --ref REF [--dbsnp DBSNP] --json JSON [--id ID] [--cohort_controls COHORT_CONTROLS] [--cohort_cases COHORT_CASES] [--csi] [--log {DEBUG,INFO,WARNING,ERROR,CRITICAL}] [--alias ALIAS] Map GWAS summary statistics to VCF/BCF optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit --out OUT Path to output VCF/BCF. If not present then must be specified as 'out' in json file --data DATA Path to GWAS summary stats. If not present then must be specified as 'data' in json file --ref REF Path to reference FASTA --dbsnp DBSNP Path to reference dbSNP VCF --json JSON Path to parameters JSON --id ID Study identifier. If not present then must be specified as 'id' in json file --cohort_controls COHORT_CONTROLS Total study number of controls (if case/control) or total sample size if continuous. Overwrites value if present in json file. --cohort_cases COHORT_CASES Total study number of cases. Overwrites value if present in json file. --csi Default is to index tbi but use this flag to index csi --log {DEBUG,INFO,WARNING,ERROR,CRITICAL} Set the logging level --alias ALIAS Optional chromosome alias file Additional parameters are passed through a JSON parameters file using --json <param.json> , see param.py for full details and below example. Note that field columns start at 0.","title":"Usage"},{"location":"install/#running-the-tests","text":"Unit tests: cd gwas2vcf python -m pytest -v test","title":"Running the tests"},{"location":"install/#reference-files","text":"","title":"Reference files"},{"location":"install/#fasta","text":"# GRCh36/hg18/b36 wget http://fileserve.mrcieu.ac.uk/ref/2.8/b36/human_b36_both.fasta.gz wget http://fileserve.mrcieu.ac.uk/ref/2.8/b36/human_b36_both.fasta.fai wget http://fileserve.mrcieu.ac.uk/ref/2.8/b36/human_b36_both.dict # GRCh37/hg19/b37 wget http://fileserve.mrcieu.ac.uk/ref/2.8/b37/human_g1k_v37.fasta.gz wget http://fileserve.mrcieu.ac.uk/ref/2.8/b37/human_g1k_v37.fasta.fai wget http://fileserve.mrcieu.ac.uk/ref/2.8/b37/human_g1k_v37.dict # GRCh38/hg38/b38 wget https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.fasta wget https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.fasta.fai wget https://storage.googleapis.com/genomics-public-data/resources/broad/hg38/v0/Homo_sapiens_assembly38.dict","title":"FASTA"},{"location":"install/#dbsnp","text":"# GRCh37/hg19/b37 wget http://fileserve.mrcieu.ac.uk/dbsnp/dbsnp.v153.b37.vcf.gz . wget http://fileserve.mrcieu.ac.uk/dbsnp/dbsnp.v153.b37.vcf.gz.tbi . # GRCh38/hg38/b38 wget http://fileserve.mrcieu.ac.uk/dbsnp/dbsnp.v153.hg38.vcf.gz . wget http://fileserve.mrcieu.ac.uk/dbsnp/dbsnp.v153.hg38.vcf.gz.tbi . Newer dbSNP builds can be obtained from the NCBI FTP but the VCF files have non-standard chromosome names which can be updated accordingly (thanks @darked89) # download latest dbSNP VCF wget https://ftp.ncbi.nih.gov/snp/latest_release/VCF/GCF_000001405.39.gz # define chromosome name mapping echo -n \"NC_000001.11 1 NC_000002.12 2 NC_000003.12 3 NC_000004.12 4 NC_000005.10 5 NC_000006.12 6 NC_000007.14 7 NC_000008.11 8 NC_000009.12 9 NC_000010.11 10 NC_000011.10 11 NC_000012.12 12 NC_000013.11 13 NC_000014.9 14 NC_000015.10 15 NC_000016.10 16 NC_000017.11 17 NC_000018.10 18 NC_000019.10 19 NC_000020.11 20 NC_000021.9 21 NC_000022.11 22 NC_000023.11 X NC_000024.10 Y NC_012920.1 MT \" > hg38_rename_chrom_names.tsv # update chromosome names bcftools annotate \\ --rename-chrs hg38_rename_chrom_names.tsv \\ --output-type z \\ --output dbSNP_clean.vcf.gz GCF_000001405.39.gz","title":"dbSNP"},{"location":"tutorial/","text":"Tutorial Assuming the GWAS summary stats have a hg19/b37 chromosome name & position you can use these files: Reference FASTA dbSNP VCF Alias File Download GWAS # obtain test gwas summary stats wget https://raw.githubusercontent.com/MRCIEU/gwas2vcfweb/master/app/tests/data/example.1k.txt Create parameters file { \"chr_col\": 0, \"pos_col\": 1, \"snp_col\": 2, \"ea_col\": 3, \"oa_col\": 4, \"beta_col\": 5, \"se_col\": 6, \"ncontrol_col\": 7, \"pval_col\": 8, \"eaf_col\": 9, \"delimiter\": \"\\t\", \"header\": true, \"build\": \"GRCh37\" } Map GWAS summary stats to GWAS-VCF SumStatsFile=/data/example.1k.txt RefGenomeFile=/data/human_g1k_v37.fasta ParamFile=/data/params.json DbSnpVcfFile=/data/dbsnp.v153.b37.vcf.gz VcfFileOutPath=/data/out.vcf ID=\"test\" python /app/main.py \\ --data ${SumStatsFile} \\ --json ${ParamFile} \\ --id ${ID} \\ --ref ${RefGenomeFile} \\ --dbsnp ${DbSnpVcfFile} \\ --out ${VcfFileOutPath} \\ --alias /app/alias-b37.txt Alias file Some genome builds use the chr prefix on chromosome names i.e. chr1 while others just use 1 . This will cause issues if your GWAS summary statistics and FASTA you wish to map to have different chromosome names (although they use the same genome build). One solution is to provide an alias file to map your GWAS summary stats chromosome name to another string. An example alias is provided in the repo alias-b37.txt and alias-hg38.txt . The format is source-chr\\tdest-chr one row per contig.","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"Assuming the GWAS summary stats have a hg19/b37 chromosome name & position you can use these files: Reference FASTA dbSNP VCF Alias File","title":"Tutorial"},{"location":"tutorial/#download-gwas","text":"# obtain test gwas summary stats wget https://raw.githubusercontent.com/MRCIEU/gwas2vcfweb/master/app/tests/data/example.1k.txt","title":"Download GWAS"},{"location":"tutorial/#create-parameters-file","text":"{ \"chr_col\": 0, \"pos_col\": 1, \"snp_col\": 2, \"ea_col\": 3, \"oa_col\": 4, \"beta_col\": 5, \"se_col\": 6, \"ncontrol_col\": 7, \"pval_col\": 8, \"eaf_col\": 9, \"delimiter\": \"\\t\", \"header\": true, \"build\": \"GRCh37\" }","title":"Create parameters file"},{"location":"tutorial/#map-gwas-summary-stats-to-gwas-vcf","text":"SumStatsFile=/data/example.1k.txt RefGenomeFile=/data/human_g1k_v37.fasta ParamFile=/data/params.json DbSnpVcfFile=/data/dbsnp.v153.b37.vcf.gz VcfFileOutPath=/data/out.vcf ID=\"test\" python /app/main.py \\ --data ${SumStatsFile} \\ --json ${ParamFile} \\ --id ${ID} \\ --ref ${RefGenomeFile} \\ --dbsnp ${DbSnpVcfFile} \\ --out ${VcfFileOutPath} \\ --alias /app/alias-b37.txt","title":"Map GWAS summary stats to GWAS-VCF"},{"location":"tutorial/#alias-file","text":"Some genome builds use the chr prefix on chromosome names i.e. chr1 while others just use 1 . This will cause issues if your GWAS summary statistics and FASTA you wish to map to have different chromosome names (although they use the same genome build). One solution is to provide an alias file to map your GWAS summary stats chromosome name to another string. An example alias is provided in the repo alias-b37.txt and alias-hg38.txt . The format is source-chr\\tdest-chr one row per contig.","title":"Alias file"}]}